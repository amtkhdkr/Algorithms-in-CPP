John has discovered various rocks. Each rock is composed of various elements, and each element is represented by a lowercase latin letter from ‘a’ to ‘z’. An element can be present multiple times in a rock. An element is called a ‘gem-element’ if it occurs at least once in each of the rocks.

Given the list of rocks with their compositions, you have to print how many different kinds of gems-elements he has.

Input Format
The first line consists of N, the number of rocks.
Each of the next N lines contain rocks’ composition. Each composition consists of small alphabets of English language.

Output Format
Print the number of different kinds of gem-elements he has.

Constraints
1 ≤ N ≤ 100 
Each composition consists of only small latin letters (‘a’-‘z’).
1 ≤ Length of each composition ≤ 100

Sample Input

3
abcdde
baccd
eeabg
Sample Output

2
Explanation
Only “a”, “b” are the two kind of gem-elements, since these characters occur in each of the rocks’ composition.

----------------------------------------------------------------------------------------------------------------------------
#include<iostream>

using namespace std;
/*
Here,I will be assigning all 26 letters to an array.Each letter will have a corresponding count
which will be incremented if that letter occurs in the input but is non repeating in nature. That is,
count will not increment if the SAME element occurs again and again in the SAME rock, but it should
increment once if the ROCK changes. At the end of input,all 26 letters will be scanned to check their count.
The ones which have their count as N will the answer.
*/
class gemFinder
{
    int count[26];
    char gems[26];
    int N;
public:
    gemFinder(int noOfRocks)
    {
        N=noOfRocks;
        for(int i=0,j='a';i<26 && j<='z';i++,j++)
        {
            count[i]=0;
            gems[i]=(char)j;
        }
    }
    void increment(char input,int currentRock)
    {
        int index=input-'a';//this is the required index. 0=a 1=b..25=z
     if(count[index] == (currentRock-1))
            count[index]++;//only increment those elements which are closely following currentRock
                            //as others are missing somewhere(difference was not 1)
                            //hence automatically removes them from play
    }
    int checkResult()
    {
        int noOfGems=0;//should never happen,just a placeholder for an error
        for(int i=0;i<26;i++)
        {
            if(count[i]==N)
            noOfGems++;
        }
      return  noOfGems;
    }
};
int main()
{
    int currentRock=1;//start from first rock
    int N;
    cin>>N;
    gemFinder GuyDangerous(N);
    char c=getchar();//for the '/n' after N!
    while( (c=getchar()) != EOF )
    {
        if(c=='\n')
            currentRock++;
        else
            GuyDangerous.increment(c,currentRock);
    }
    //now check for result
    cout<<GuyDangerous.checkResult();
    return 0;    
}
