/*
You are given a string of lowercase letters. Your task is to figure out the index of the character on whose removal will make the string a palindrome. There will always be a valid solution.
In case string is already palindrome, then -1 is also a valid answer along with possible indices.

Input Format
The first line contains T i.e. number of test cases.
T lines follow, each line containing a string.

Output Format
Print the position ( 0 index ) of the letter by removing which the string turns into a palindrome. For string, such as

bcbc
we can remove b at index 0 or c at index 3. Both the answers are accepted.

Constraints
1 ≤ T ≤ 20
1 ≤ length of string ≤ 100005
All characters are latin lower case indexed.

Sample Input #00

3
aaab
baa
aaa
Sample Output #00

3
0
0
Explanation

In the given input, T = 3,

For input aaab, we can see that removing b from the string makes the string a palindrome, hence the position 3.
For input baa, removing b from the string makes the string palindrome, hence the position 0.
As the string aaa is already a palindrome, you can output 0, 1 or 2 as removal of any of the characters still maintains the palindrome property. Or you can print -1 as this is already a palindrome.
*/

#include<iostream>
#include<string>
#include<stack>

using namespace std;
bool checkPalindrome(string input)
{
    stack<char> mystack;
    string output("");
    for(int i=0;i<input.length();i++)
        mystack.push(input[i]);
    
    //now pop back
    while(!mystack.empty())
    {
        output+=mystack.top();
        mystack.pop();
    }
    if (input.compare(output)==0)
        return true;
    
return false;
}

int scanPalindrome(string input)
{
  int left=0,right=input.length()-1;
  /*concept here is: if the string is a palindrome then left and right characters
  MUST be equal to each other. If the input is a palindrome then left will loop till
  it crosses over to right (or becomes equal) and output is thus -1
  But if the left and right characters DO NOT match, it means one of them is our culprit
  character. Finding him is easy,just extract the string other than the character and check
  for palindrome property. The one whose removal causes the string to be a palindrome is our
  required answer
  */
  while(left<right)
  {
      if(input[left]==input[right])
      {
         left++;
         right--; 
      }
      else
      {
          string trial= input.substr(0,left)+input.substr(left+1);
          bool leftResult= checkPalindrome(trial);
            if(leftResult) return left;
          
          trial=input.substr(0,right)+input.substr(right+1);
          bool rightResult= checkPalindrome(trial);
            if(rightResult) return right;
      }
  }    
return -1;
}
int main()
{
    int T;
    cin>>T;string input;
    for(int i=0;i<T;i++)
    {
        cin>>input;
        cout<<scanPalindrome(input)<<endl;
    }
return 0;
}
